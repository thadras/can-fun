{"version":3,"sources":["tui-img.js","App.js","reportWebVitals.js","index.js"],"names":["MENU_ARRAY","TuiImageEditor","ref","React","createRef","imageEditorOptions","cssMaxWidth","cssMaxHeight","selectionStyle","cornerSize","rotatingPointOffset","usageStatistics","includeUI","menu","menuBarPosition","uiSize","width","height","loadImage","path","process","name","initMenu","handleClickButton","op","editorInstance","current","getInstance","console","log","flipX","flipY","this","bindWindowResize","initState","instance","np","pp","groupCollapsed","props","groupEnd","window","innerHeight","innerWidth","state","setState","onresize","e","Object","keys","ui","resizeEditor","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uUAIMA,EAAa,CAAE,QAAS,OAAQ,SAAU,OAAQ,SAAU,OAAQ,OAAQ,OAAQ,Q,IAgBrEC,E,4MACjBC,IAAMC,IAAMC,UAAU,M,EACtBC,mBAAqB,CACjBC,YAjBU,IAkBVC,aAjBW,IAkBXC,eAAgB,CACZC,WAAY,GACZC,oBAAqB,IAEzBC,iBAAiB,EACjBC,UAAW,CACPC,KAAMb,EACNc,gBAAiB,SACjBC,OAAQ,CACJC,MAAO,OACPC,OAAQ,SAEVC,UAAW,CACTC,KAAMC,wBACNC,KAAM,gBAGdC,SAAU,U,EAgCdC,kBAAoB,SAACC,GACjB,IAAMC,EAAiB,EAAKvB,IAAIwB,QAAQC,cAExC,OADAC,QAAQC,IAAR,+BAAoCL,IAC5BA,GACJ,IAAK,IACDC,EAAeK,QACf,MACJ,IAAK,IACDL,EAAeM,U,kEArCvBC,KAAKC,mBACLD,KAAKE,YACLN,QAAQC,IAAIG,KAAKG,Y,4CAGCC,EAAIC,GAStB,OARAT,QAAQU,eAAe,gBACvBV,QAAQC,IAAIG,KAAKG,UAEjBP,QAAQC,IAAIO,GACZR,QAAQC,IAAIQ,GAEZT,QAAQC,IAAIG,KAAKO,OACjBX,QAAQY,YACD,I,kCAIE,IAAD,EAC4BC,OAA5BC,EADA,EACAA,YACF1B,EAzDQ,GAuDN,EACa2B,WAEf1B,EAzDS,GAyDiByB,EAChCd,QAAQC,IAAIG,KAAKY,OACjBZ,KAAKa,SAAS,CACV7B,QACAC,a,yCAkBY,IAAD,OACfwB,OAAOK,SAAW,SAACC,GACf,IAAMtB,EAAiB,EAAKvB,IAAIwB,QAAQC,cACxC,EAAKO,YACLN,QAAQU,eAAR,uBAAuCU,OAAOC,KAAKxB,KACnDG,QAAQC,IAAIJ,GACZG,QAAQC,IAAI,GACZD,QAAQC,IAAIkB,GACZnB,QAAQY,WACRf,EAAeyB,GAAGC,gBAEtBvB,QAAQC,IAAIG,Q,+BAchB,OATwB,OAArBA,KAAK9B,IAAIwB,SACZE,QAAQC,IAAR,mBACAG,KAAKC,oBAIFL,QAAQC,IAAI,cAGP,mCACJ,cAAC,IAAD,aACI3B,IAAK8B,KAAK9B,KACN8B,KAAK3B,2B,GAhGuBF,IAAMiD,WCNnCC,MAXf,WACE,OAAQ,mCAIN,+BACI,cAAC,EAAD,SCGOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.418640a0.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'tui-image-editor/dist/tui-image-editor.css'\r\nimport ImageEditor from '@toast-ui/react-image-editor'\r\n\r\nconst MENU_ARRAY = [ 'shape', 'crop', 'filter', 'flip', 'rotate', 'draw', 'icon', 'mask', 'text'];\r\n\r\nconst MAX_WIDTH = 960;\r\nconst MAX_HEIGHT = 800;\r\nconst PERCENT_WIDTH = 0.8;\r\nconst PERCENT_HEIGHT = 0.8;\r\n\r\n\r\nexport function theApiEditor(callback) {\r\n    console.log('useApiEditor');\r\n    return (<>\r\n            <button onClick={() => callback('x')}>Flip by X Axis!</button>\r\n            <button onClick={() => callback('y')}>Flip by Y Axis!</button>\r\n    </>);\r\n}\r\n\r\nexport default class TuiImageEditor extends React.Component {\r\n    ref = React.createRef(null);\r\n    imageEditorOptions = {\r\n        cssMaxWidth: MAX_WIDTH,\r\n        cssMaxHeight: MAX_HEIGHT,\r\n        selectionStyle: {\r\n            cornerSize: 20,\r\n            rotatingPointOffset: 70\r\n        },\r\n        usageStatistics: false,\r\n        includeUI: {\r\n            menu: MENU_ARRAY,\r\n            menuBarPosition: 'bottom',\r\n            uiSize: {\r\n                width: '100%',\r\n                height: '100vh'\r\n              },\r\n              loadImage: {\r\n                path: process.env.PUBLIC_URL + '/img/hill.jpg',\r\n                name: 'SampleImage'\r\n            },\r\n        },\r\n        initMenu: 'filter',\r\n    };\r\n    componentDidMount() {\r\n        this.bindWindowResize();\r\n        this.initState();\r\n        console.log(this.instance);\r\n    }\r\n     \r\n    shouldComponentUpdate(np, pp) {\r\n        console.groupCollapsed('instance sCU')\r\n        console.log(this.instance)\r\n\r\n        console.log(np)\r\n        console.log(pp)\r\n\r\n        console.log(this.props)\r\n        console.groupEnd()\r\n        return true;\r\n\r\n    }\r\n\r\n    initState() {\r\n        const { innerHeight, innerWidth } = window;\r\n        const width = PERCENT_WIDTH * innerWidth;\r\n        const height = PERCENT_HEIGHT * innerHeight;\r\n        console.log(this.state);\r\n        this.setState({\r\n            width,\r\n            height,\r\n        })\r\n\r\n    }\r\n    handleClickButton = (op) => {\r\n        const editorInstance = this.ref.current.getInstance();\r\n        console.log(`button click with op ${op}`)\r\n        switch (op) {\r\n            case 'x': \r\n                editorInstance.flipX();\r\n                break;\r\n            case 'y': \r\n                editorInstance.flipY();\r\n                break;\r\n            default:\r\n        }\r\n    };\r\n\r\n    bindWindowResize() {\r\n        window.onresize = (e) => {\r\n            const editorInstance = this.ref.current.getInstance();\r\n            this.initState();\r\n            console.groupCollapsed(`resizing eI: ${Object.keys(editorInstance)}`)\r\n            console.log(editorInstance)\r\n            console.log(this);\r\n            console.log(e);\r\n            console.groupEnd()\r\n            editorInstance.ui.resizeEditor();\r\n        };\r\n        console.log(this)\r\n    }\r\n\r\n    render() {\r\n   \r\n   if (this.ref.current !== null ) {\r\n    console.log(`re-init-tui ref`);\r\n    this.bindWindowResize();\r\n    //console.log();\r\n\r\n   } else {\r\n       console.log('no element')\r\n   }\r\n\r\n    return (<>\r\n        <ImageEditor\r\n            ref={this.ref} \r\n            {...this.imageEditorOptions} \r\n        />\r\n        {/* {this.ref && theApiEditor(this.handleClickButton)} */}\r\n    </>);\r\n    }\r\n};\r\n","import './App.css';\nimport TuiImageEditor from './tui-img'\n\nfunction App() {\n  return (<>\n    {/* <header className=\"App-header\">\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    </header> */}\n    <main>\n        <TuiImageEditor/>\n    </main>\n  </>);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}